---

- name: set the disk list with datadisk
  set_fact:
    os_disk: [ { size_gb: "{{ vm_os_disk_size }}", datastore: "{{ vm_disk_datastore }}" }, { size_gb: "{{ vm_data_disk_size }}", type: "{{ vm_disk_type }}", datastore: "{{ vm_disk_datastore }}" } ]
  when: vm_data_disk_size != 0

- name: set the disk list without datadisk
  set_fact:
    os_disk: [ { size_gb: "{{ vm_os_disk_size }}", datastore: "{{ vm_disk_datastore }}" } ]
  when: vm_data_disk_size == 0

- name: set the networks
  set_fact: 
    vm_net_details: [ { name: "{{ vm_network_name }}", type: "static", ip: "{{ vm_ip_address }}", netmask: "{{ vm_ip_netmask }}", gateway: "{{ vm_ip_gateway }}", dns_servers: "{{ vm_ip_dns }}" }]
  when: vm_net_details == "" and vm_ip_address != ""

- name: set the networks
  set_fact: 
    vm_net_details: [ { name: "{{ vm_network_name }}", type: "dhcp" }]
  when: vm_net_details == "" and vm_ip_address == ""

- name: create vm from a template
  vmware_guest:
    hostname: "{{ vcenter_ip }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: False
    folder: "{{ vcenter_folder }}" 
    datacenter: "{{ vcenter_datacenter }}"
    cluster: "{{ vcenter_cluster }}"
    name: "{{ vm_name }}"
    state: poweredon
    template: "{{ vm_template }}"
    disk: "{{ os_disk }}"
    hardware:
      memory_mb: "{{ vm_memory }}"
      num_cpus: "{{ vm_vcpu }}"
      num_cpu_cores_per_socket: "{{ vm_cpu_per_socket }}"
      scsi: paravirtual
      memory_reservation: "{{ vm_memory }}"
      memory_reservation_lock: False
      mem_limit: "{{ vm_memory }}"
      mem_reservation: "{{ vm_memory }}"
#      max_connections: "5"
      hotadd_cpu: True
      hotremove_cpu: True
      hotadd_memory: False
    cdrom:
      type: none
    networks: "{{ vm_net_details }}"
    wait_for_ip_address: yes
  delegate_to: localhost
  register: vminstance

- name: add to the inventory
  add_host:
    name: "{{ vm_name }}"
    ansible_host: "{{ vminstance.instance.hw_eth0.ipaddresses[0] }}"
    group: "{{ vm_inventory_group }}"
    uuid: "{{ vminstance.instance.instance_uuid }}"
  when: vm_inventory_group != ""
